/*
-----------------------------------------------------------------------------
Filename:    OgreVishesh.cpp
-----------------------------------------------------------------------------


This source file is generated by the
   ___                   _              __    __ _                  _ 
  /___\__ _ _ __ ___    /_\  _ __  _ __/ / /\ \ (_)______ _ _ __ __| |
 //  // _` | '__/ _ \  //_\\| '_ \| '_ \ \/  \/ / |_  / _` | '__/ _` |
/ \_// (_| | | |  __/ /  _  \ |_) | |_) \  /\  /| |/ / (_| | | | (_| |
\___/ \__, |_|  \___| \_/ \_/ .__/| .__/ \/  \/ |_/___\__,_|_|  \__,_|
      |___/                 |_|   |_|                                 
      Ogre 1.8.x Application Wizard for VC10 (May 2012)
      https://bitbucket.org/jacmoe/ogreappwizards
-----------------------------------------------------------------------------
*/

#include "../include/OgreVishesh.h"
#include<iostream>

using namespace std;

//-------------------------------------------------------------------------------------
OgreVishesh::OgreVishesh(void)
{
}
//-------------------------------------------------------------------------------------
OgreVishesh::~OgreVishesh(void)
{
}

void OgreVishesh::createCamera(void)
{
  mCamera= mSceneMgr->createCamera("MyCam");
	mCamera->setPosition(0,100,200);
	mCamera->lookAt(0,0,0);
	mCamera->setNearClipDistance(5);
	mCamera->setPolygonMode(Ogre::PM_WIREFRAME);
	//y89 mCameraMan = new OgreBites::SdkCameraMan(mCamera);
}

void OgreVishesh:: createViewports(void)
{
	Ogre::Viewport* vp= mWindow->addViewport(mCamera);
	vp->setBackgroundColour(Ogre::ColourValue(0,1,1));
	mCamera->setAspectRatio(Ogre::Real(vp->getActualWidth()/vp->getActualHeight()));	
}

//-------------------------------------------------------------------------------------
void OgreVishesh::createScene(void)
{

	Ogre::Plane plane(Ogre::Vector3::UNIT_Y,-100);
	Ogre::MeshManager::getSingleton().createPlane("plane",Ogre::ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME,plane,
													1500,1500,200,200,true,1,5,5,Ogre::Vector3::UNIT_Z);
	Ogre::Entity* ent=mSceneMgr->createEntity("LightPlaneEntity","plane");
	mSceneMgr->getRootSceneNode()->createChildSceneNode()->attachObject(ent);
	ent->setMaterialName("Examples/BeachStones");

	//mSceneMgr->setAmbientLight(Ogre::ColourValue(1, 0.5, 0));

	// Create a light
    Ogre::Light* light1 = mSceneMgr->createLight("Light1");
	//Ogre::Light* light2 = mSceneMgr->createLight("Light2");
	//light1->setType(Ogre::Light::LT_POINT);					//to crteate point light sources
	//light2->setType(Ogre::Light::LT_POINT);
	//light1->setType(Ogre::Light::LT_SPOTLIGHT);						//to crteate spotlight sources
	//light2->setType(Ogre::Light::LT_SPOTLIGHT);
	light1->setType(Ogre::Light::LT_DIRECTIONAL);

	light1->setDirection(Ogre::Vector3(1,-1,0));
	light1->setDiffuseColour(1,1,1);

	/*light1->setDirection(Ogre::Vector3(1,-1,0));
	light1->setSpotlightInnerAngle(Ogre::Degree(5));
	light1->setSpotlightOuterAngle(Ogre::Degree(45));
	light1->setSpotlightFalloff(0);
    light1->setPosition(0,100,0);
	light1->setDiffuseColour(0,1,0);

	light2->setDirection(Ogre::Vector3(1,-1,0));
	light2->setSpotlightInnerAngle(Ogre::Degree(5));
	light2->setSpotlightOuterAngle(Ogre::Degree(45));
	light2->setSpotlightFalloff(0);
    light2->setPosition(0,200,0);
	light2->setDiffuseColour(1,0,0);*/
	//light2->setPosition(20,20,20);
	//light2->setDiffuseColour(1,0,0);

	//Ogre::Entity* sphr1 = mSceneMgr->createEntity("sph1", "sphere.mesh");
	//Ogre::Entity* sphr2 = mSceneMgr->createEntity("sph2", "sphere.mesh");
	//Ogre::SceneNode* node1=mSceneMgr->createSceneNode("node1");
	//Ogre::SceneNode* node2=mSceneMgr->createSceneNode("node2");
	//mSceneMgr->getRootSceneNode()->addChild(node1);
	//mSceneMgr->getRootSceneNode()->addChild(node2);
	/*node1->attachObject(sphr1);
	//node2->attachObject(sphr2);
	node1->setScale(0.1,0.1,0.1);
	node1->setPosition(0,100,0);*/
	//node2->setScale(0.1,0.1,0.1);
	//node2->setPosition(20,20,20);


    Ogre::Entity* ent1 = mSceneMgr->createEntity("Head1", "Sinbad.mesh");
	//Ogre::Entity* ent2 = mSceneMgr->createEntity("Head2", "ninja.mesh");
	//Ogre::Entity* ent2 = mSceneMgr->createEntity("Head2", "Sinbad.mesh");
	//Ogre::Entity* ent3 = mSceneMgr->createEntity("Head3", "Sinbad.mesh");

	Ogre::SceneNode* node1=mSceneMgr->createSceneNode("node1");
	//Ogre::SceneNode* node2=mSceneMgr->createSceneNode("node2");
	//Ogre::SceneNode* node3=mSceneMgr->createSceneNode("node3");

	mSceneMgr->getRootSceneNode()->addChild(node1);
	//node1->addChild(node2);
	//node1->addChild(node3);

	node1->setPosition(0,-3,0);
	//node2->setPosition(20,0,0);
	//node3->setPosition(20,0,0);
	//node3->translate(20,0,0);

	node1->attachObject(ent1);
	//node2->attachObject(ent2);
	//node3->attachObject(ent3);

	node1->scale(5,5,5);
	//node2->scale(0.2,0.2,0.2);
	//node3->scale(0.25,0.25,0.25);
	mSceneMgr->setShadowTechnique(Ogre:: SHADOWTYPE_STENCIL_ADDITIVE);

	//node1->yaw(Ogre::Degree(180.0f));

    /* example 1
	Ogre::SceneNode* headNode1 = mSceneMgr->getRootSceneNode()->createChildSceneNode("head1");
	Ogre::SceneNode* node1 = mSceneMgr->createSceneNode("node1");

	Ogre::SceneNode* headNode2 = headNode1->createChildSceneNode("head2",Ogre::Vector3(100,0,0));
    headNode1->attachObject(ogreHead1);
	headNode2->attachObject(ogreHead2);
	headNode2->translate(Ogre::Vector3(-100,0,100));*/
	
    // Set ambient light
    
    
	//cout<<ogreHead1->getName();

}



#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
#define WIN32_LEAN_AND_MEAN
#include "windows.h"
#endif

#ifdef __cplusplus
extern "C" {
#endif

#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
    INT WINAPI WinMain( HINSTANCE hInst, HINSTANCE, LPSTR strCmdLine, INT )
#else
    int main(int argc, char *argv[])
#endif
    {
        // Create application object
        OgreVishesh app;

        try {
            app.go();
        } catch( Ogre::Exception& e ) {
#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
            MessageBox( NULL, e.getFullDescription().c_str(), "An exception has occured!", MB_OK | MB_ICONERROR | MB_TASKMODAL);
#else
            std::cerr << "An exception has occured: " <<
                e.getFullDescription().c_str() << std::endl;
#endif
        }

        return 0;
    }

#ifdef __cplusplus
}
#endif
